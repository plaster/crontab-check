#!/usr/bin/env perl
use strict;
use warnings;
use utf8;

use Getopt::Long qw(:config posix_default no_ignore_case gnu_compat);
use IO::File;
use List::Util qw(any);

our $current_dispo;
our $current_line_no;
our $current_line_content;
our $current_file;
our $current_user;

our $now;
our $is_auto_mode = 0;
our $is_location_mode = 0;
our $duration_future = 3600;
our $duration_past = 0;
our @patterns;

our @files;
our @user_files;

sub error($$) {
	my $where = shift;
	my $msg = shift;
	die "*** $where Error: ${msg}\n";
}

sub opt_duration($$) {
	my ($k, $v) = @_;
	if ( $v =~ m/^([1-9][0-9]*)m/ ) {
		return 60 * $1;
	}
	elsif ( $v =~ m/^([1-9][0-9]*)h/ ) {
		return 60 * 60 * $1;
	}
	elsif ( $v =~ m/^([1-9][0-9]*)d/ ) {
		return 60 * 60 * 24 * $1;
	}
	elsif ( $v =~ m/^([1-9][0-9]*)w/ ) {
		return 60 * 60 * 24 * 7 * $1;
	}
	else {
		error(CommandLine => "--$k $v is invalid. allowed: [1-9][0-9]...{m|h|d|w}");
	}
}

sub show_usage() {
	print STDERR qq{$0 - crontab simulator}, "\n";
	print STDERR qq{usage:}, "\n";
	print STDERR "\t" . qq{$0 <option-spec>}, "\n";
	print STDERR qq{option-spec:}, "\n";
	print STDERR "\t", qq{[--past <duration-spec>]}, "\n";
	print STDERR "\t", qq{[--in   <duration-spec>]}, "\n";
	print STDERR "\t\t", qq{Show jobs in the past and future.}, "\n";
	print STDERR "\t\t", qq{Default: at most 59 seconds in the past, and 60 minutes in the future.}, "\n";
	print STDERR "\t", qq{[--at-unix <UNIXTIME>]}, "\n";
	print STDERR "\t\t", qq{Specify timeline origin. Default: now (i.e. the time just before output starts.)}, "\n";
	print STDERR "\t", qq{[--file      <path-spec>] ...}, "\n";
	print STDERR "\t", qq{[--user-file <path-spec>] ...}, "\n";
	print STDERR "\t\t", qq{Load specified files instead of installed ones.}, "\n";
	print STDERR "\t\t", qq{--file is for system-crontab files (that has user field).}, "\n";
	print STDERR "\t\t", qq{--user-file is for user-crontab files (that does not have user field).}, "\n";
	print STDERR "\t", qq{[--pattern <PATTERN>] ...}, "\n";
	print STDERR "\t\t", qq{Filter entries: Show the entry only if command has PATTERN as substring.}, "\n";
	print STDERR "\t", qq{[--print-location]}, "\n";
	print STDERR "\t\t", qq{Show raw crontab entry and its location, instead of job command.}, "\n";
	print STDERR qq{duration-spec:}, "\n";
	print STDERR "\t", qq{<num>m\t\tminutes.}, "\n";
	print STDERR "\t", qq{<num>h\t\thours.}, "\n";
	print STDERR "\t", qq{<num>d\t\tdays.}, "\n";
	print STDERR "\t", qq{<num>w\t\tweeks.}, "\n";
	print STDERR qq{path-spec:}, "\n";
	print STDERR "\t", qq{-\t\tSTDIN}, "\n";
	print STDERR "\t", qq{other\t\tPath to the file to load.}, "\n";
}

GetOptions(
	"at-unix=s" => \$now,
	"auto" => \$is_auto_mode,
	"file=s" => \@files,
	"help" => sub { show_usage(); exit(0); },
	"in=s" => sub {
		my ($k, $v) = @_;
		$duration_future = opt_duration($k, $v);
	},
	"past=s" => sub {
		my ($k, $v) = @_;
		$duration_past = opt_duration($k, $v);
	},
	"pattern=s" => \@patterns,
	"print-location" => \$is_location_mode,
	"user-file=s" => \@user_files,
) or error(CommandLine => "invalid option.");

scalar(@files) || scalar(@user_files) or
	$is_auto_mode = 1;

sub current_location() {
	my $location = '';
	if (defined($current_file) && $current_file ne '') {
		$location .= "$current_file";
	} else {
		$location .= "<Unknown>";
	}
	$location .= ":$current_line_no" if defined $current_line_no;
	$location .= ":$current_line_content" if defined ($current_line_content) && $current_line_content ne '';
	return $location;
}

sub syntax_error($) {
	my $msg = shift;
	my $location = current_location();

	error(Syntax => "$msg" . ($location eq '' ? '' : " at ${location}"));
}

sub io_error($) {
	my $msg = shift;
	error(IO => $msg);
}

our %max4dispo = (
	min => 59,
	hour => 23,
	day => 31,
	month => 12,
	dayofweek => 7,
);
our $current_pat3_min;
our $current_pat3_max;

sub check_pat3_range($) {
	my $n = shift;
	$n < $current_pat3_min and
		syntax_error("$n is too small (< $current_pat3_min)");
	$n > $current_pat3_max and
		syntax_error("$n is too large (> $current_pat3_max)");
	$current_pat3_min = $n;
}

# type Pat2 = ( Pat3, Maybe Int )
# data Pat3 = Number Int | Range Int Int| Asterisk
# parse2 :: String -> Pat2
sub parse2($) {
	my $pat2 = shift;

	my $pat3;
	my $step;

	if ($pat2 =~ m@(.+)/([0-9]+)@) {
		$pat3 = $1;
		$step = $2;
	} else {
		$pat3 = $pat2;
		$step = undef;
	}

	! defined($step) || $step > 1 or
		syntax_error("$step is invalid step: $pat2");

	my $n;

	if ( $pat3 eq '*' ) {
		$n = '*';
	} elsif ($pat3 =~ m/^[0-9]+$/) {
		defined($step) and
			syntax_error("step is not allowed here (must be with range or *): $pat2");
		$n = $pat3;
		check_pat3_range($n);
	} elsif ($pat3 =~ m/^([0-9]+)-([0-9]+)$/) {
		$n = +[ $1, $2 ];
		check_pat3_range($n->[0]);
		check_pat3_range($n->[1]);
	} else {
		syntax_error("number, range or * is required, but got: $pat2");
	}

	return +[ $n, $step ];
}

# type Pat1 = [ Pat2 ]
# parse1 :: String -> Pat1
sub parse1($) {
	my $pat1 = shift;
	defined($current_dispo) or
		error(InternalError => '$current_dispo is undefined.');
	defined($pat1) && $pat1 ne '' or
		syntax_error("$current_dispo is missing");
	$pat1 =~ m/,$/ and
		syntax_error("trailing comma is not allowed");
	local $current_pat3_min = 0;
	local $current_pat3_max = $max4dispo{$current_dispo};
	defined($current_pat3_max) or
		error(InternalError => "\$max4dispo{$current_dispo} is undefined.");
	return +[ map { parse2($_) } split(m/,/, $pat1) ];
}

# type Entry = ( Pat1, Pat1, Pat1, Pat1, Pat1, String, String, String )
# parse_line :: String -> Entry
sub parse_line($) {
	local $current_line_content = shift;

	chomp $current_line_content or syntax_error("NO EOL");
	$current_line_content =~ s/^[ \t]*//;

	# blank line and comments are ignored
	return undef if $current_line_content eq '';
	return undef if $current_line_content =~ m/^#/;
	# variable line are also ignored
	return undef if $current_line_content =~ m/^[A-Za-z_]+ *=/;

	my ($min, $hour, $day, $month, $dow, $user, $cmd);
	if (defined($current_user)) {
		$user = $current_user;
		($min, $hour, $day, $month, $dow, $cmd) = split(m/[ \t]+/, $current_line_content, 6);
	} else {
		($min, $hour, $day, $month, $dow, $user, $cmd) = split(m/[ \t]+/, $current_line_content, 7);
	}
	return +[
		do { local $current_dispo = 'min';       parse1($min);   },
		do { local $current_dispo = 'hour';      parse1($hour);  },
		do { local $current_dispo = 'day';       parse1($day);   },
		do { local $current_dispo = 'month';     parse1($month); },
		do { local $current_dispo = 'dayofweek'; parse1($dow);   },
		$user, $cmd, current_location() ];
}

# match2 :: (Pat2, Int) -> Boolean
sub match2($$) {
	my $pat2 = shift;
	my $time1 = shift;

	my ($pat3, $step) = @{$pat2};

	my $stepbase = 0;

	if (ref($pat3)) {
		# range
		$pat3->[0] <= $time1 && $time1 <= $pat3->[1] or return 0;
		$stepbase = $pat3->[0];
	} elsif ($pat3 eq '*') {
		# asterisk - always pass
	} else {
		# number
		$time1 == $pat3 or return 0;
	}

	# step check
	if (defined($step) && defined($stepbase)) {
		($stepbase % $step) == ($time1 % $step) || return 0;
	}

	return 1;
}

# match1 :: (Pat1, Int) -> Boolean
sub match1($$) {
	my $pat1 = shift;
	my $time1 = shift;

	any { match2($_, $time1) } @{$pat1} and return 1;
	return 0;
}

# type Time = ( Int, Int, Int, Int, Int )
# match_entry :: (Entry, Time) -> Boolean
sub match_entry($$) {
	my $entry = shift;
	my $time = shift;

	match1($entry->[0], $time->[0]) or return 0;
	match1($entry->[1], $time->[1]) or return 0;
	match1($entry->[2], $time->[2]) or return 0;
	match1($entry->[3], $time->[3]) or return 0;
	match1($entry->[4], $time->[4]) || ( $time->[4] == 0 && match1($entry->[4], 7)) or return 0;

	scalar(@patterns) and do {
		#XXX: empty OR-CLAUSE should be 'false' from the point of view of program modurality...
		#XXX: but 'true' maybe more useful for human operators.
		any {
			index($entry->[6], $_) >= 0
		} @patterns or return 0;
	};

	return 1;
}

my @entries;

sub load_fh($) {
	my $fh = shift;
	while (<$fh>) {
		local $current_line_no = "$.";
		my $entry = parse_line($_) or next;
		push @entries, $entry;
	}
}

sub load_file($) {
	local $current_file = shift;
	my $fh = IO::File->new( "< $current_file") or io_error("cannot open $current_file");
	load_fh($fh);
}

sub load_current_system_crontab() {
	do {
		my $file = '/etc/crontab';
		-r $file and load_file($file);
	};
	do {
		my $dir = '/etc/cron.d';
		-d $dir and do {
			opendir(my $dh, '/etc/cron.d') or io_error("cannot open directory $dir");
			while (readdir $dh) {
				my $file =  "${dir}/${_}";
				load_file($file);
			}
			closedir $dh or io_error("cannot close directory $dir");
		};
	}
}

sub load_current_user_crontab() {
	local $current_user = getpwuid($<);
	local $current_file = '<USER-CRONTAB>';
	my $cmd = 'crontab -l';
	my $fh = IO::File->new("$cmd |") or io_error("cannot invoke $cmd");
	load_fh($fh);
}

# load crontab entries at first
for my $file ( @files ) {
	if ($file eq '-') {
		local $current_file = '<STDIN>';
		load_fh(\*STDIN);
	} else {
		load_file($file);
	}
}
for my $file ( @user_files ) {
	local $current_user = '<USER>';
	if ($file eq '-') {
		local $current_file = '<STDIN>';
		load_fh(\*STDIN);
	} else {
		load_file($file);
	}
}
if ($is_auto_mode) {
	load_current_system_crontab();
	load_current_user_crontab();
}

sub show_interval($$) {
	my $seconds = shift;
	my $sign = shift || '+';
	if ($seconds < 0) {
		$sign = '-';
	} elsif ($seconds > 0) {
		$sign = '+';
	}
	$seconds = abs($seconds);
	return sprintf(qq{%s%d'%02d"}, $sign, int($seconds / 60), $seconds % 60);
}

# then play timeline and match to entries
defined($now) or $now = time;

my $now0 = $now - ($now % 60); # XXX: round second to zero. is this correct...?
my $since = $now0 - $duration_past;
my $until = $now0 + $duration_future;
my $last_match = $since;

my $print_now = sub {
	my @t = localtime($now);
	printf("%04d-%02d-%02d %02d:%02d:%02d ------ ------------- NOW\n",
		$t[5] + 1900, $t[4] + 1, $t[3], $t[2], $t[1], $t[0],
		);
	$last_match = $now;
};

do {
	my @t = localtime($since);
	printf("%04d-%02d-%02d %02d:%02d --------- ( %9s ) BEGIN\n",
		$t[5] + 1900, $t[4] + 1, $t[3], $t[2], $t[1],
		show_interval($since - $now, '-'),
		);
};

for (my $t = $since; $t <= $until; $t += 60) {
	my @t = localtime($t);

	for my $entry ( @entries ) {
		if (match_entry($entry, +[
			$t[1], $t[2], $t[3], $t[4] + 1,
			$t[6],
			])
		) {
			if ($now < $t && $print_now) {
				$print_now->();
				undef $print_now;
			}
			if ($is_location_mode) {
				printf(qq{%04d-%02d-%02d %02d:%02d %9s ( %9s ) %s\n},
					$t[5] + 1900, $t[4] + 1, $t[3], $t[2], $t[1],
					($t > $now ? show_interval($t - $last_match, '+') : '---------'),
					show_interval($t - $now, '-'),
					$entry->[7]);
			} else {
				printf(qq{%04d-%02d-%02d %02d:%02d %9s ( %9s ) %s %s\n},
					$t[5] + 1900, $t[4] + 1, $t[3], $t[2], $t[1],
					($t > $now ? show_interval($t - $last_match, '+') : '---------'),
					show_interval($t - $now, '-'),
					$entry->[5] ? $entry->[5] : '-', $entry->[6]);
			}
			$last_match = $t;
		}
	}
}

do {
	if ($print_now) {
		$print_now->();
		undef $print_now;
	}
	my @t = localtime($until);
	printf("%04d-%02d-%02d %02d:%02d %9s ( %9s ) END\n",
		$t[5] + 1900, $t[4] + 1, $t[3], $t[2], $t[1],
		show_interval($until - $last_match, '+'),
		show_interval($until - $now, '+'),
		);
};

exit(0);
